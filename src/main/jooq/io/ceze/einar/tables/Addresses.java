/*
 * This file is generated by jOOQ.
 */
package io.ceze.einar.tables;


import io.ceze.einar.Keys;
import io.ceze.einar.Public;
import io.ceze.einar.tables.records.AddressesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Addresses extends TableImpl<AddressesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.addresses</code>
     */
    public static final Addresses ADDRESSES = new Addresses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressesRecord> getRecordType() {
        return AddressesRecord.class;
    }

    /**
     * The column <code>public.addresses.addr_id</code>.
     */
    public final TableField<AddressesRecord, Integer> ADDR_ID = createField(DSL.name("addr_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.addresses.addr_num</code>.
     */
    public final TableField<AddressesRecord, Integer> ADDR_NUM = createField(DSL.name("addr_num"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.addresses.street</code>.
     */
    public final TableField<AddressesRecord, String> STREET = createField(DSL.name("street"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.addresses.city</code>.
     */
    public final TableField<AddressesRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.addresses.state</code>.
     */
    public final TableField<AddressesRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.addresses.postal_code</code>.
     */
    public final TableField<AddressesRecord, String> POSTAL_CODE = createField(DSL.name("postal_code"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.addresses.country</code>.
     */
    public final TableField<AddressesRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.addresses.created_at</code>.
     */
    public final TableField<AddressesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.addresses.updated_at</code>.
     */
    public final TableField<AddressesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Addresses(Name alias, Table<AddressesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Addresses(Name alias, Table<AddressesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.addresses</code> table reference
     */
    public Addresses(String alias) {
        this(DSL.name(alias), ADDRESSES);
    }

    /**
     * Create an aliased <code>public.addresses</code> table reference
     */
    public Addresses(Name alias) {
        this(alias, ADDRESSES);
    }

    /**
     * Create a <code>public.addresses</code> table reference
     */
    public Addresses() {
        this(DSL.name("addresses"), null);
    }

    public <O extends Record> Addresses(Table<O> child, ForeignKey<O, AddressesRecord> key) {
        super(child, key, ADDRESSES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AddressesRecord, Integer> getIdentity() {
        return (Identity<AddressesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AddressesRecord> getPrimaryKey() {
        return Keys.ADDRESSES_PKEY;
    }

    @Override
    public List<UniqueKey<AddressesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ADDRESSES_ADDR_NUM_STREET_CITY_KEY);
    }

    @Override
    public Addresses as(String alias) {
        return new Addresses(DSL.name(alias), this);
    }

    @Override
    public Addresses as(Name alias) {
        return new Addresses(alias, this);
    }

    @Override
    public Addresses as(Table<?> alias) {
        return new Addresses(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Addresses rename(String name) {
        return new Addresses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Addresses rename(Name name) {
        return new Addresses(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Addresses rename(Table<?> name) {
        return new Addresses(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
