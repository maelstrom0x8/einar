/*
 * This file is generated by jOOQ.
 */
package io.ceze.einar.tables;


import io.ceze.einar.Keys;
import io.ceze.einar.Public;
import io.ceze.einar.tables.records.ApartmentsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Apartments extends TableImpl<ApartmentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.apartments</code>
     */
    public static final Apartments APARTMENTS = new Apartments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApartmentsRecord> getRecordType() {
        return ApartmentsRecord.class;
    }

    /**
     * The column <code>public.apartments.apt_id</code>.
     */
    public final TableField<ApartmentsRecord, Long> APT_ID = createField(DSL.name("apt_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.apartments.address_id</code>.
     */
    public final TableField<ApartmentsRecord, Long> ADDRESS_ID = createField(DSL.name("address_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.apartments.owner_id</code>.
     */
    public final TableField<ApartmentsRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER, this, "");

    private Apartments(Name alias, Table<ApartmentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Apartments(Name alias, Table<ApartmentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.apartments</code> table reference
     */
    public Apartments(String alias) {
        this(DSL.name(alias), APARTMENTS);
    }

    /**
     * Create an aliased <code>public.apartments</code> table reference
     */
    public Apartments(Name alias) {
        this(alias, APARTMENTS);
    }

    /**
     * Create a <code>public.apartments</code> table reference
     */
    public Apartments() {
        this(DSL.name("apartments"), null);
    }

    public <O extends Record> Apartments(Table<O> child, ForeignKey<O, ApartmentsRecord> key) {
        super(child, key, APARTMENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ApartmentsRecord, Long> getIdentity() {
        return (Identity<ApartmentsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApartmentsRecord> getPrimaryKey() {
        return Keys.APARTMENTS_PKEY;
    }

    @Override
    public List<ForeignKey<ApartmentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.APARTMENTS__APARTMENTS_ADDRESS_ID_FKEY, Keys.APARTMENTS__APARTMENTS_OWNER_ID_FKEY);
    }

    private transient Addresses _addresses;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.addresses</code> table.
     */
    public Addresses addresses() {
        if (_addresses == null)
            _addresses = new Addresses(this, Keys.APARTMENTS__APARTMENTS_ADDRESS_ID_FKEY);

        return _addresses;
    }

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.APARTMENTS__APARTMENTS_OWNER_ID_FKEY);

        return _users;
    }

    @Override
    public Apartments as(String alias) {
        return new Apartments(DSL.name(alias), this);
    }

    @Override
    public Apartments as(Name alias) {
        return new Apartments(alias, this);
    }

    @Override
    public Apartments as(Table<?> alias) {
        return new Apartments(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Apartments rename(String name) {
        return new Apartments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apartments rename(Name name) {
        return new Apartments(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apartments rename(Table<?> name) {
        return new Apartments(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
