/*
 * This file is generated by jOOQ.
 */
package io.ceze.einar.tables;


import io.ceze.einar.Keys;
import io.ceze.einar.Public;
import io.ceze.einar.tables.records.SpacesRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Spaces extends TableImpl<SpacesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.spaces</code>
     */
    public static final Spaces SPACES = new Spaces();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpacesRecord> getRecordType() {
        return SpacesRecord.class;
    }

    /**
     * The column <code>public.spaces.space_id</code>.
     */
    public final TableField<SpacesRecord, Long> SPACE_ID = createField(DSL.name("space_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.spaces.created_by</code>.
     */
    public final TableField<SpacesRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.spaces.location_id</code>.
     */
    public final TableField<SpacesRecord, Long> LOCATION_ID = createField(DSL.name("location_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.spaces.description</code>.
     */
    public final TableField<SpacesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.spaces.price</code>.
     */
    public final TableField<SpacesRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(10, 3), this, "");

    private Spaces(Name alias, Table<SpacesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Spaces(Name alias, Table<SpacesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.spaces</code> table reference
     */
    public Spaces(String alias) {
        this(DSL.name(alias), SPACES);
    }

    /**
     * Create an aliased <code>public.spaces</code> table reference
     */
    public Spaces(Name alias) {
        this(alias, SPACES);
    }

    /**
     * Create a <code>public.spaces</code> table reference
     */
    public Spaces() {
        this(DSL.name("spaces"), null);
    }

    public <O extends Record> Spaces(Table<O> child, ForeignKey<O, SpacesRecord> key) {
        super(child, key, SPACES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SpacesRecord, Long> getIdentity() {
        return (Identity<SpacesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SpacesRecord> getPrimaryKey() {
        return Keys.SPACES_PKEY;
    }

    @Override
    public List<ForeignKey<SpacesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SPACES__SPACES_CREATED_BY_FKEY, Keys.SPACES__SPACES_LOCATION_ID_FKEY);
    }

    private transient Users _users;
    private transient Locations _locations;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.SPACES__SPACES_CREATED_BY_FKEY);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>public.locations</code> table.
     */
    public Locations locations() {
        if (_locations == null)
            _locations = new Locations(this, Keys.SPACES__SPACES_LOCATION_ID_FKEY);

        return _locations;
    }

    @Override
    public Spaces as(String alias) {
        return new Spaces(DSL.name(alias), this);
    }

    @Override
    public Spaces as(Name alias) {
        return new Spaces(alias, this);
    }

    @Override
    public Spaces as(Table<?> alias) {
        return new Spaces(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Spaces rename(String name) {
        return new Spaces(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Spaces rename(Name name) {
        return new Spaces(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Spaces rename(Table<?> name) {
        return new Spaces(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, String, BigDecimal> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super Long, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super Long, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
