/*
 * This file is generated by jOOQ.
 */
package io.ceze.einar.tables.records;


import io.ceze.einar.tables.Apartments;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApartmentsRecord extends UpdatableRecordImpl<ApartmentsRecord> implements Record3<Long, Long, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.apartments.apt_id</code>.
     */
    public void setAptId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.apartments.apt_id</code>.
     */
    public Long getAptId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.apartments.address_id</code>.
     */
    public void setAddressId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.apartments.address_id</code>.
     */
    public Long getAddressId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.apartments.owner_id</code>.
     */
    public void setOwnerId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.apartments.owner_id</code>.
     */
    public Integer getOwnerId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Apartments.APARTMENTS.APT_ID;
    }

    @Override
    public Field<Long> field2() {
        return Apartments.APARTMENTS.ADDRESS_ID;
    }

    @Override
    public Field<Integer> field3() {
        return Apartments.APARTMENTS.OWNER_ID;
    }

    @Override
    public Long component1() {
        return getAptId();
    }

    @Override
    public Long component2() {
        return getAddressId();
    }

    @Override
    public Integer component3() {
        return getOwnerId();
    }

    @Override
    public Long value1() {
        return getAptId();
    }

    @Override
    public Long value2() {
        return getAddressId();
    }

    @Override
    public Integer value3() {
        return getOwnerId();
    }

    @Override
    public ApartmentsRecord value1(Long value) {
        setAptId(value);
        return this;
    }

    @Override
    public ApartmentsRecord value2(Long value) {
        setAddressId(value);
        return this;
    }

    @Override
    public ApartmentsRecord value3(Integer value) {
        setOwnerId(value);
        return this;
    }

    @Override
    public ApartmentsRecord values(Long value1, Long value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ApartmentsRecord
     */
    public ApartmentsRecord() {
        super(Apartments.APARTMENTS);
    }

    /**
     * Create a detached, initialised ApartmentsRecord
     */
    public ApartmentsRecord(Long aptId, Long addressId, Integer ownerId) {
        super(Apartments.APARTMENTS);

        setAptId(aptId);
        setAddressId(addressId);
        setOwnerId(ownerId);
        resetChangedOnNotNull();
    }
}
