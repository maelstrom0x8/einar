/*
 * This file is generated by jOOQ.
 */
package io.ceze.einar.tables.records;


import io.ceze.einar.tables.Tokens;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.YearToSecond;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokensRecord extends UpdatableRecordImpl<TokensRecord> implements Record7<Long, String, Long, LocalDateTime, YearToSecond, LocalDateTime, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.tokens.token_id</code>.
     */
    public void setTokenId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.tokens.token_id</code>.
     */
    public Long getTokenId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.tokens.value</code>.
     */
    public void setValue(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.tokens.value</code>.
     */
    public String getValue() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.tokens.user_id</code>.
     */
    public void setUserId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.tokens.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.tokens.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.tokens.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>public.tokens.duration</code>.
     */
    public void setDuration(YearToSecond value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.tokens.duration</code>.
     */
    public YearToSecond getDuration() {
        return (YearToSecond) get(4);
    }

    /**
     * Setter for <code>public.tokens.expires_at</code>.
     */
    public void setExpiresAt(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.tokens.expires_at</code>.
     */
    public LocalDateTime getExpiresAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.tokens.expired</code>.
     */
    public void setExpired(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.tokens.expired</code>.
     */
    public Boolean getExpired() {
        return (Boolean) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Long, LocalDateTime, YearToSecond, LocalDateTime, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, String, Long, LocalDateTime, YearToSecond, LocalDateTime, Boolean> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Tokens.TOKENS.TOKEN_ID;
    }

    @Override
    public Field<String> field2() {
        return Tokens.TOKENS.VALUE;
    }

    @Override
    public Field<Long> field3() {
        return Tokens.TOKENS.USER_ID;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Tokens.TOKENS.CREATED_AT;
    }

    @Override
    public Field<YearToSecond> field5() {
        return Tokens.TOKENS.DURATION;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Tokens.TOKENS.EXPIRES_AT;
    }

    @Override
    public Field<Boolean> field7() {
        return Tokens.TOKENS.EXPIRED;
    }

    @Override
    public Long component1() {
        return getTokenId();
    }

    @Override
    public String component2() {
        return getValue();
    }

    @Override
    public Long component3() {
        return getUserId();
    }

    @Override
    public LocalDateTime component4() {
        return getCreatedAt();
    }

    @Override
    public YearToSecond component5() {
        return getDuration();
    }

    @Override
    public LocalDateTime component6() {
        return getExpiresAt();
    }

    @Override
    public Boolean component7() {
        return getExpired();
    }

    @Override
    public Long value1() {
        return getTokenId();
    }

    @Override
    public String value2() {
        return getValue();
    }

    @Override
    public Long value3() {
        return getUserId();
    }

    @Override
    public LocalDateTime value4() {
        return getCreatedAt();
    }

    @Override
    public YearToSecond value5() {
        return getDuration();
    }

    @Override
    public LocalDateTime value6() {
        return getExpiresAt();
    }

    @Override
    public Boolean value7() {
        return getExpired();
    }

    @Override
    public TokensRecord value1(Long value) {
        setTokenId(value);
        return this;
    }

    @Override
    public TokensRecord value2(String value) {
        setValue(value);
        return this;
    }

    @Override
    public TokensRecord value3(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public TokensRecord value4(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public TokensRecord value5(YearToSecond value) {
        setDuration(value);
        return this;
    }

    @Override
    public TokensRecord value6(LocalDateTime value) {
        setExpiresAt(value);
        return this;
    }

    @Override
    public TokensRecord value7(Boolean value) {
        setExpired(value);
        return this;
    }

    @Override
    public TokensRecord values(Long value1, String value2, Long value3, LocalDateTime value4, YearToSecond value5, LocalDateTime value6, Boolean value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TokensRecord
     */
    public TokensRecord() {
        super(Tokens.TOKENS);
    }

    /**
     * Create a detached, initialised TokensRecord
     */
    public TokensRecord(Long tokenId, String value, Long userId, LocalDateTime createdAt, YearToSecond duration, LocalDateTime expiresAt, Boolean expired) {
        super(Tokens.TOKENS);

        setTokenId(tokenId);
        setValue(value);
        setUserId(userId);
        setCreatedAt(createdAt);
        setDuration(duration);
        setExpiresAt(expiresAt);
        setExpired(expired);
        resetChangedOnNotNull();
    }
}
