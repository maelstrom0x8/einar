/*
 * This file is generated by jOOQ.
 */
package io.ceze.einar.tables;


import io.ceze.einar.Keys;
import io.ceze.einar.Public;
import io.ceze.einar.tables.records.TokensRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.YearToSecond;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tokens extends TableImpl<TokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tokens</code>
     */
    public static final Tokens TOKENS = new Tokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokensRecord> getRecordType() {
        return TokensRecord.class;
    }

    /**
     * The column <code>public.tokens.token_id</code>.
     */
    public final TableField<TokensRecord, Long> TOKEN_ID = createField(DSL.name("token_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tokens.value</code>.
     */
    public final TableField<TokensRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.tokens.user_id</code>.
     */
    public final TableField<TokensRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tokens.created_at</code>.
     */
    public final TableField<TokensRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tokens.duration</code>.
     */
    public final TableField<TokensRecord, YearToSecond> DURATION = createField(DSL.name("duration"), SQLDataType.INTERVAL.nullable(false), this, "");

    /**
     * The column <code>public.tokens.expires_at</code>.
     */
    public final TableField<TokensRecord, LocalDateTime> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.tokens.expired</code>.
     */
    public final TableField<TokensRecord, Boolean> EXPIRED = createField(DSL.name("expired"), SQLDataType.BOOLEAN, this, "");

    private Tokens(Name alias, Table<TokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tokens(Name alias, Table<TokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tokens</code> table reference
     */
    public Tokens(String alias) {
        this(DSL.name(alias), TOKENS);
    }

    /**
     * Create an aliased <code>public.tokens</code> table reference
     */
    public Tokens(Name alias) {
        this(alias, TOKENS);
    }

    /**
     * Create a <code>public.tokens</code> table reference
     */
    public Tokens() {
        this(DSL.name("tokens"), null);
    }

    public <O extends Record> Tokens(Table<O> child, ForeignKey<O, TokensRecord> key) {
        super(child, key, TOKENS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TokensRecord, Long> getIdentity() {
        return (Identity<TokensRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TokensRecord> getPrimaryKey() {
        return Keys.TOKENS_PKEY;
    }

    @Override
    public List<ForeignKey<TokensRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TOKENS__TOKENS_USER_ID_FKEY);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.TOKENS__TOKENS_USER_ID_FKEY);

        return _users;
    }

    @Override
    public Tokens as(String alias) {
        return new Tokens(DSL.name(alias), this);
    }

    @Override
    public Tokens as(Name alias) {
        return new Tokens(alias, this);
    }

    @Override
    public Tokens as(Table<?> alias) {
        return new Tokens(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokens rename(String name) {
        return new Tokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokens rename(Name name) {
        return new Tokens(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokens rename(Table<?> name) {
        return new Tokens(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Long, LocalDateTime, YearToSecond, LocalDateTime, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super Long, ? super LocalDateTime, ? super YearToSecond, ? super LocalDateTime, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super Long, ? super LocalDateTime, ? super YearToSecond, ? super LocalDateTime, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
