/*
 * This file is generated by jOOQ.
 */
package io.ceze.einar.tables;


import io.ceze.einar.Keys;
import io.ceze.einar.Public;
import io.ceze.einar.tables.records.NegotiationRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Negotiation extends TableImpl<NegotiationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.negotiation</code>
     */
    public static final Negotiation NEGOTIATION = new Negotiation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NegotiationRecord> getRecordType() {
        return NegotiationRecord.class;
    }

    /**
     * The column <code>public.negotiation.id</code>.
     */
    public final TableField<NegotiationRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.negotiation.completed</code>.
     */
    public final TableField<NegotiationRecord, Boolean> COMPLETED = createField(DSL.name("completed"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.negotiation.created_at</code>.
     */
    public final TableField<NegotiationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Negotiation(Name alias, Table<NegotiationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Negotiation(Name alias, Table<NegotiationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.negotiation</code> table reference
     */
    public Negotiation(String alias) {
        this(DSL.name(alias), NEGOTIATION);
    }

    /**
     * Create an aliased <code>public.negotiation</code> table reference
     */
    public Negotiation(Name alias) {
        this(alias, NEGOTIATION);
    }

    /**
     * Create a <code>public.negotiation</code> table reference
     */
    public Negotiation() {
        this(DSL.name("negotiation"), null);
    }

    public <O extends Record> Negotiation(Table<O> child, ForeignKey<O, NegotiationRecord> key) {
        super(child, key, NEGOTIATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<NegotiationRecord, Integer> getIdentity() {
        return (Identity<NegotiationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NegotiationRecord> getPrimaryKey() {
        return Keys.NEGOTIATION_PKEY;
    }

    @Override
    public Negotiation as(String alias) {
        return new Negotiation(DSL.name(alias), this);
    }

    @Override
    public Negotiation as(Name alias) {
        return new Negotiation(alias, this);
    }

    @Override
    public Negotiation as(Table<?> alias) {
        return new Negotiation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Negotiation rename(String name) {
        return new Negotiation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Negotiation rename(Name name) {
        return new Negotiation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Negotiation rename(Table<?> name) {
        return new Negotiation(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Boolean, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Boolean, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Boolean, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
