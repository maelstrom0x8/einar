/*
 * This file is generated by jOOQ.
 */
package io.ceze.einar.tables;


import io.ceze.einar.Keys;
import io.ceze.einar.Public;
import io.ceze.einar.tables.records.ProfilesRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Profiles extends TableImpl<ProfilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.profiles</code>
     */
    public static final Profiles PROFILES = new Profiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfilesRecord> getRecordType() {
        return ProfilesRecord.class;
    }

    /**
     * The column <code>public.profiles.profile_id</code>.
     */
    public final TableField<ProfilesRecord, Long> PROFILE_ID = createField(DSL.name("profile_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.profiles.user_id</code>.
     */
    public final TableField<ProfilesRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.profiles.first_name</code>.
     */
    public final TableField<ProfilesRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.profiles.last_name</code>.
     */
    public final TableField<ProfilesRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.profiles.dob</code>.
     */
    public final TableField<ProfilesRecord, LocalDate> DOB = createField(DSL.name("dob"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.profiles.street_no</code>.
     */
    public final TableField<ProfilesRecord, Integer> STREET_NO = createField(DSL.name("street_no"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.profiles.street_name</code>.
     */
    public final TableField<ProfilesRecord, String> STREET_NAME = createField(DSL.name("street_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.profiles.city</code>.
     */
    public final TableField<ProfilesRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.profiles.state</code>.
     */
    public final TableField<ProfilesRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.profiles.postal_code</code>.
     */
    public final TableField<ProfilesRecord, String> POSTAL_CODE = createField(DSL.name("postal_code"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.profiles.country</code>.
     */
    public final TableField<ProfilesRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.CHAR(2).nullable(false), this, "");

    /**
     * The column <code>public.profiles.created_at</code>.
     */
    public final TableField<ProfilesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.profiles.last_modified</code>.
     */
    public final TableField<ProfilesRecord, LocalDateTime> LAST_MODIFIED = createField(DSL.name("last_modified"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Profiles(Name alias, Table<ProfilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Profiles(Name alias, Table<ProfilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.profiles</code> table reference
     */
    public Profiles(String alias) {
        this(DSL.name(alias), PROFILES);
    }

    /**
     * Create an aliased <code>public.profiles</code> table reference
     */
    public Profiles(Name alias) {
        this(alias, PROFILES);
    }

    /**
     * Create a <code>public.profiles</code> table reference
     */
    public Profiles() {
        this(DSL.name("profiles"), null);
    }

    public <O extends Record> Profiles(Table<O> child, ForeignKey<O, ProfilesRecord> key) {
        super(child, key, PROFILES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProfilesRecord> getPrimaryKey() {
        return Keys.PROFILES_PKEY;
    }

    @Override
    public List<ForeignKey<ProfilesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROFILES__PROFILES_USER_ID_FKEY);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.PROFILES__PROFILES_USER_ID_FKEY);

        return _users;
    }

    @Override
    public Profiles as(String alias) {
        return new Profiles(DSL.name(alias), this);
    }

    @Override
    public Profiles as(Name alias) {
        return new Profiles(alias, this);
    }

    @Override
    public Profiles as(Table<?> alias) {
        return new Profiles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Profiles rename(String name) {
        return new Profiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Profiles rename(Name name) {
        return new Profiles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Profiles rename(Table<?> name) {
        return new Profiles(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, String, String, LocalDate, Integer, String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Long, ? super Long, ? super String, ? super String, ? super LocalDate, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Long, ? super Long, ? super String, ? super String, ? super LocalDate, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
