/*
 * This file is generated by jOOQ.
 */
package com.godelhaze.whitestone.tables.records;


import com.godelhaze.whitestone.tables.Books;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BooksRecord extends UpdatableRecordImpl<BooksRecord> implements Record4<Integer, String, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.books.book_id</code>.
     */
    public void setBookId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.books.book_id</code>.
     */
    public Integer getBookId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.books.title</code>.
     */
    public void setTitle(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.books.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.books.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.books.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.books.last_updated</code>.
     */
    public void setLastUpdated(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.books.last_updated</code>.
     */
    public LocalDateTime getLastUpdated() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Books.BOOKS.BOOK_ID;
    }

    @Override
    public Field<String> field2() {
        return Books.BOOKS.TITLE;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Books.BOOKS.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Books.BOOKS.LAST_UPDATED;
    }

    @Override
    public Integer component1() {
        return getBookId();
    }

    @Override
    public String component2() {
        return getTitle();
    }

    @Override
    public LocalDateTime component3() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component4() {
        return getLastUpdated();
    }

    @Override
    public Integer value1() {
        return getBookId();
    }

    @Override
    public String value2() {
        return getTitle();
    }

    @Override
    public LocalDateTime value3() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value4() {
        return getLastUpdated();
    }

    @Override
    public BooksRecord value1(Integer value) {
        setBookId(value);
        return this;
    }

    @Override
    public BooksRecord value2(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public BooksRecord value3(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public BooksRecord value4(LocalDateTime value) {
        setLastUpdated(value);
        return this;
    }

    @Override
    public BooksRecord values(Integer value1, String value2, LocalDateTime value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BooksRecord
     */
    public BooksRecord() {
        super(Books.BOOKS);
    }

    /**
     * Create a detached, initialised BooksRecord
     */
    public BooksRecord(Integer bookId, String title, LocalDateTime createdAt, LocalDateTime lastUpdated) {
        super(Books.BOOKS);

        setBookId(bookId);
        setTitle(title);
        setCreatedAt(createdAt);
        setLastUpdated(lastUpdated);
        resetChangedOnNotNull();
    }
}
